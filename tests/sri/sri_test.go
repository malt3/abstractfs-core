package sri_test

import (
	"strings"
	"testing"

	"github.com/malt3/abstractfs-core/sri"
	"github.com/stretchr/testify/assert"
)

func TestFromToString(t *testing.T) {
	testCases := map[string]struct {
		input   string
		want    sri.Integrity
		wantErr bool
	}{
		"empty": {
			wantErr: true,
		},
		"sha256": {
			input: "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
			want: sri.Integrity{
				Algorithm: "sha256",
				Hash: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		"sha384": {
			input: "sha384-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
			want: sri.Integrity{
				Algorithm: "sha384",
				Hash: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		"sha512": {
			input: "sha512-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
			want: sri.Integrity{
				Algorithm: "sha512",
				Hash: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		"invalid algorithm": {
			input:   "foo123-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
			wantErr: true,
		},
		"invalid length": {
			input:   "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
			wantErr: true,
		},
		"invalid base64": {
			input:   "sha256-a",
			wantErr: true,
		},
	}

	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)
			got, err := sri.FromString(tc.input)
			assert.Equal(tc.wantErr, err != nil)
			assert.Equal(tc.want, got)
			if err == nil {
				assert.Equal(tc.input, got.String())
			}
		})
	}
}

func TestFromReader(t *testing.T) {
	testCases := map[string]struct {
		input      string
		wantSHA256 sri.Integrity
		wantSHA384 sri.Integrity
		wantSHA512 sri.Integrity
		wantErr    bool
	}{
		"empty": {
			wantSHA256: sri.Integrity{
				Algorithm: "sha256",
				Hash: []byte{
					0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
					0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
					0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
					0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				},
			},
			wantSHA384: sri.Integrity{
				Algorithm: "sha384",
				Hash: []uint8{
					0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38,
					0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
					0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
					0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
					0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
					0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b,
				},
			},
			wantSHA512: sri.Integrity{
				Algorithm: "sha512",
				Hash: []uint8{
					0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
					0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
					0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
					0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
					0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
					0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
					0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
					0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
				},
			},
		},
		"foo": {
			input: "foo",
			wantSHA256: sri.Integrity{
				Algorithm: "sha256",
				Hash: []byte{
					0x2c, 0x26, 0xb4, 0x6b, 0x68, 0xff, 0xc6, 0x8f,
					0xf9, 0x9b, 0x45, 0x3c, 0x1d, 0x30, 0x41, 0x34,
					0x13, 0x42, 0x2d, 0x70, 0x64, 0x83, 0xbf, 0xa0,
					0xf9, 0x8a, 0x5e, 0x88, 0x62, 0x66, 0xe7, 0xae,
				},
			},
			wantSHA384: sri.Integrity{
				Algorithm: "sha384",
				Hash: []uint8{
					0x98, 0xc1, 0x1f, 0xfd, 0xfd, 0xd5, 0x40, 0x67,
					0x6b, 0x1a, 0x13, 0x7c, 0xb1, 0xa2, 0x2b, 0x2a,
					0x70, 0x35, 0x0c, 0x9a, 0x44, 0x17, 0x1d, 0x6b,
					0x11, 0x80, 0xc6, 0xbe, 0x5c, 0xbb, 0x2e, 0xe3,
					0xf7, 0x9d, 0x53, 0x2c, 0x8a, 0x1d, 0xd9, 0xef,
					0x2e, 0x8e, 0x08, 0xe7, 0x52, 0xa3, 0xba, 0xbb,
				},
			},
			wantSHA512: sri.Integrity{
				Algorithm: "sha512",
				Hash: []uint8{
					0xf7, 0xfb, 0xba, 0x6e, 0x06, 0x36, 0xf8, 0x90,
					0xe5, 0x6f, 0xbb, 0xf3, 0x28, 0x3e, 0x52, 0x4c,
					0x6f, 0xa3, 0x20, 0x4a, 0xe2, 0x98, 0x38, 0x2d,
					0x62, 0x47, 0x41, 0xd0, 0xdc, 0x66, 0x38, 0x32,
					0x6e, 0x28, 0x2c, 0x41, 0xbe, 0x5e, 0x42, 0x54,
					0xd8, 0x82, 0x07, 0x72, 0xc5, 0x51, 0x8a, 0x2c,
					0x5a, 0x8c, 0x0c, 0x7f, 0x7e, 0xda, 0x19, 0x59,
					0x4a, 0x7e, 0xb5, 0x39, 0x45, 0x3e, 0x1e, 0xd7,
				},
			},
		},
	}

	for name, tc := range testCases {
		for _, algorithm := range []sri.Algorithm{sri.SHA256, sri.SHA384, sri.SHA512} {
			t.Run(name+"/"+string(algorithm), func(t *testing.T) {
				assert := assert.New(t)
				got, err := sri.FromReader(algorithm, strings.NewReader(tc.input))
				assert.Equal(tc.wantErr, err != nil)
				switch algorithm {
				case sri.SHA256:
					assert.Equal(tc.wantSHA256, got)
				case sri.SHA384:
					assert.Equal(tc.wantSHA384, got)
				case sri.SHA512:
					assert.Equal(tc.wantSHA512, got)
				}
				if err == nil {
					assert.NoError(got.Validate(strings.NewReader(tc.input)))
				}
			})
		}
	}
}
